// Pull in the Metal standard library, giving us access
// to things like the sin() and cos() functions.
#include <metal_stdlib>
using namespace metal;

// Sticking with the same Vertex structure as last time.
struct GBEVertex
{
    float4 position [[attribute(0)]];
    float4 color    [[attribute(1)]];
};

// We provide a rotation angle as a Uniform to the vertex shader.
// We'll update this rotation angle from the C code, but do the
// math to rotate the triangle here in the shader.
struct Uniforms
{
    float rotationAngle;
};

struct OutputVertex
{
    float4 position [[position]];
    float4 color;
};

vertex OutputVertex vertex_main(
  GBEVertex vertex_in [[stage_in]],
  constant Uniforms* uniforms [[buffer(0)]]
)
{
  // Rotate the incoming vertex's position around the origin.
  float sinTheta = sin(uniforms->rotationAngle);
  float cosTheta = cos(uniforms->rotationAngle);

  float x = vertex_in.position.x * cosTheta - vertex_in.position.y * sinTheta;
  float y = vertex_in.position.y * cosTheta + vertex_in.position.x * sinTheta;

  // And pass the rotated vertex along to the next stage.
  OutputVertex out;
  out.position = float4(x, y, 0, 1);
  out.color = vertex_in.color;
  return out;
}
